(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{369:function(t,s,a){t.exports=a.p+"assets/img/event-loop.817b8585.png"},389:function(t,s,a){"use strict";a.r(s);var n=a(44),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"异步编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步编程"}},[t._v("#")]),t._v(" 异步编程")]),t._v(" "),n("h2",{attrs:{id:"promise"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise",target:"_blank",rel:"noopener noreferrer"}},[t._v("Promise语法"),n("OutboundLink")],1),t._v(" "),n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/144058361",target:"_blank",rel:"noopener noreferrer"}},[t._v("手写Promise"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"generator函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generator函数"}},[t._v("#")]),t._v(" Generator函数")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/generator",target:"_blank",rel:"noopener noreferrer"}},[t._v("Generator函数"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"async-await"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#async-await"}},[t._v("#")]),t._v(" async await")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/async",target:"_blank",rel:"noopener noreferrer"}},[t._v("async await"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"事件循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),n("p",[t._v("JavaScript语言的一大特点就是单线程，为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。")]),t._v(" "),n("p",[t._v("消息队列：消息队列是一个先进先出的队列，它里面存放着各种消息。")]),t._v(" "),n("p",[t._v("事件循环：事件循环是指主线程重复从消息队列中取消息、执行的过程。")]),t._v(" "),n("p",[t._v("主线程执行发起函数，通过发起函数通知相应的线程可以开始执行相应的异步任务，异步任务则在其他线程中执行，不会阻塞js主线程的执行")]),t._v(" "),n("p",[t._v("异步任务得到结果后会在任务队列中放置一个回调函数，通常称之为“事件”，异步任务通过回调函数通知主线程这个异步任务可以继续往下执行，只要主线程一空，程序就会读取任务队列中的事件，任务队列中的事件进入主线程并执行")]),t._v(" "),n("p",[t._v("常用异步："),n("code",[t._v("DOM")]),t._v("、"),n("code",[t._v("ajax")]),t._v("、"),n("code",[t._v("setTimeout")]),t._v("、"),n("code",[t._v("promise")]),t._v("（网络请求，定时器和事件监听）")]),t._v(" "),n("p",[n("img",{attrs:{src:a(369),alt:"Image from alias"}})]),t._v(" "),n("h2",{attrs:{id:"宏任务和微任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务"}},[t._v("#")]),t._v(" 宏任务和微任务")]),t._v(" "),n("p",[t._v("一个线程中，事件循环是唯一的，但是任务队列可以拥有多个。任务队列又分为macro-task（宏任务）与micro-task（微任务），在最新标准中，它们被分别称为task与jobs。")]),t._v(" "),n("p",[n("code",[t._v("macro-task")]),t._v("大概包括: "),n("code",[t._v("script")]),t._v("(整体代码), "),n("code",[t._v("setTimeout")]),t._v(", "),n("code",[t._v("setInterval")]),t._v(", "),n("code",[t._v("setImmediate")]),t._v(", "),n("code",[t._v("I/O")]),t._v(", "),n("code",[t._v("UI rendering")])]),t._v(" "),n("p",[n("code",[t._v("micro-task")]),t._v("大概包括: "),n("code",[t._v("process.nextTick")]),t._v(", "),n("code",[t._v("Promise")]),t._v(", "),n("code",[t._v("Object.observe")]),t._v("(已废弃), "),n("code",[t._v("MutationObserver")]),t._v("(H5新特性)")]),t._v(" "),n("p",[n("code",[t._v("setTimeout")]),t._v("/"),n("code",[t._v("Promise")]),t._v("等我们称之为任务源。而进入任务队列的是他们指定的具体执行任务。")]),t._v(" "),n("p",[t._v("来自不同任务源的任务会进入到不同的任务队列。其中"),n("code",[t._v("setTimeout")]),t._v("与"),n("code",[t._v("setInterval")]),t._v("是同源的。")]),t._v(" "),n("p",[t._v("事件循环的顺序，决定了JavaScript代码的执行顺序。它从script(整体代码)开始第一次循环。之后全局上下文进入函数调用栈。直到调用栈清空(只剩全局)，然后执行所有的"),n("code",[t._v("micro-task")]),t._v("。当所有可执行的"),n("code",[t._v("micro-task")]),t._v("执行完毕之后。循环再次从"),n("code",[t._v("macro-task")]),t._v("开始，找到其中一个任务队列执行完毕，然后再执行所有的"),n("code",[t._v("micro-task")]),t._v("，这样一直循环下去。如下举例：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'timeout1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'promise1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'promise2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'then1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'global1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("执行结果为：promise1 - promise2 - global1 - then1 - timeout1，分析一下代码，首先程序开始执行，遇到setTimeout时将它添加到消息队列，等待后续处理，遇到Promise时会创建微任务（.then()里面的回调），注意此时new promise构造函数中的代码还是同步执行的，只有.then中的回调会被添加到微任务队列。因此会连续输出promise1和promise2。继续执行到console.log('global1')输出global1，到此调用栈中已经为空。")]),t._v(" "),n("p",[t._v("此时微任务队列里有一个任务.then，宏任务队列里也有一个任务setTimout。")]),t._v(" "),n("p",[t._v("microtask必然是在某个宏任务执行的时候创建的，而在下一个宏任务开始之前，浏览器会对页面重新渲染(task >> 渲染 >> 下一个task(从任务队列中取一个))。同时，在上一个宏任务执行完成后，渲染页面之前，会执行当前微任务队列中的所有微任务。也就是说，"),n("strong",[t._v("在某一个宏任务执行完后，在重新渲染与开始下一个宏任务之前，就会将在它执行期间产生的所有微任务都执行完毕（在渲染前）")]),t._v("。因此会执行.then输出then1，然后进行下一轮事件循环，取出任务队列中的setTimeout输出timeout1。")])])}),[],!1,null,null,null);s.default=e.exports}}]);